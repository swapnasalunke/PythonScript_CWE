package Service.vulnerability.sqlinjection;

import java.util.Map;
import internal.Variant;
import internal.annotations.AttackVector;
import internal.annotations.VulnerableAppRequestMapping;
import internal.annotations.VulnerableAppRestController;

import org.sasanlabs.vulnerableapp.facade.schema.LevelConstants;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestParam;
import vulnerability.types.VulnerabilityType;

@VulnerableAppRestController(
        descriptionLabel = "SQL_INJECTION_VULNERABILITY",
        value = "UnionBasedSQLInjectionVulnerability")
public class UnionBasedSQLInjectionVulnerability {
    private JdbcTemplate applicationJdbcTemplate;

    public UnionBasedSQLInjectionVulnerability(
            @Qualifier("applicationJdbcTemplate") JdbcTemplate applicationJdbcTemplate) {
        this.applicationJdbcTemplate = applicationJdbcTemplate;
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.UNION_BASED_SQL_INJECTION,
            description = "UNION_SQL_INJECTION_URL_PARAM_APPENDED_DIRECTLY_TO_QUERY",
// Start: Expecting CWE-89
            payload = "UNION_BASED_SQL_INJECTION_PAYLOAD_LEVEL_1")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_1,
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseEntity<CarInformation> getCarInformationLevel1(
            @RequestParam Map<String, String> queryParams) {
        String id = queryParams.get("id");
        return applicationJdbcTemplate.query(
                "select * from cars where id=" + id,
                (rs) -> {
                    CarInformation carInformation = new CarInformation();
                    if (rs.next()) {
                        carInformation.setId(rs.getInt(1));
                        carInformation.setName(rs.getString(2));
                        carInformation.setImagePath(rs.getString(3));
// End: CWE-89
                    }
                    return new ResponseEntity<CarInformation>(carInformation, HttpStatus.OK);
                });
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.UNION_BASED_SQL_INJECTION,
            description =
                    "UNION_SQL_INJECTION_URL_PARAM_WRAPPED_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY",
            payload = "UNION_BASED_SQL_INJECTION_PAYLOAD_LEVEL_2")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_2,
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseEntity<CarInformation> getCarInformationLevel2(
            @RequestParam Map<String, String> queryParams) {
        String id = queryParams.get("id");
        CarInformation carInformation = new CarInformation();
        return applicationJdbcTemplate.query(
                "select * from cars where id='" + id + "'",
                (rs) -> {
                    if (rs.next()) {
                        carInformation.setId(rs.getInt(1));
                        carInformation.setName(rs.getString(2));
                        carInformation.setImagePath(rs.getString(3));
                    }
                    return new ResponseEntity<CarInformation>(carInformation, HttpStatus.OK);
                });
    }

    @AttackVector(
            vulnerabilityExposed = VulnerabilityType.UNION_BASED_SQL_INJECTION,
            description =
                    "UNION_SQL_INJECTION_URL_PARAM_REMOVES_SINGLE_QUOTE_WITH_SINGLE_QUOTE_APPENDED_TO_QUERY")
    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_3,
            variant = Variant.SECURE,
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseEntity<CarInformation> getCarInformationLevel3(
            @RequestParam Map<String, String> queryParams) {
        String id = queryParams.get("id").replaceAll("'", "");
        return applicationJdbcTemplate.query(
                "select * from cars where id='" + id + "'",
                (rs) -> {
                    CarInformation carInformation = new CarInformation();
                    if (rs.next()) {
                        carInformation.setId(rs.getInt(1));
                        carInformation.setName(rs.getString(2));
                        carInformation.setImagePath(rs.getString(3));
                    }
                    return new ResponseEntity<CarInformation>(carInformation, HttpStatus.OK);
                });
    }

    @VulnerableAppRequestMapping(
            value = LevelConstants.LEVEL_4,
            variant = Variant.SECURE,
            htmlTemplate = "LEVEL_1/SQLInjection_Level1")
    public ResponseEntity<CarInformation> getCarInformationLevel4(
            @RequestParam Map<String, String> queryParams) {
        String id = queryParams.get("id");

        return applicationJdbcTemplate.query(
                "select * from cars where id=?",
                (prepareStatement) -> {
                    prepareStatement.setString(1, id);
                },
                (rs) -> {
                    CarInformation carInformation = new CarInformation();
                    if (rs.next()) {
                        carInformation.setId(rs.getInt(1));
                        carInformation.setName(rs.getString(2));
                        carInformation.setImagePath(rs.getString(3));
                    }
                    return new ResponseEntity<CarInformation>(carInformation, HttpStatus.OK);
                });
    }
}
